{"ast":null,"code":"var _jsxFileName = \"/Users/kimyeun/Desktop/reservation-app-tailwind-full/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport emailjs from '@emailjs/browser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ReservationApp() {\n  _s();\n  const [lang, setLang] = useState('ko');\n  const [reservations, setReservations] = useState([]);\n  const [form, setForm] = useState({\n    name: '',\n    email: '',\n    datetimeId: '',\n    memo: ''\n  });\n  const [message, setMessage] = useState('');\n  const [adminSlots, setAdminSlots] = useState([]);\n  const [newSlot, setNewSlot] = useState({\n    title: '',\n    date: '',\n    time: ''\n  });\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [adminAuth, setAdminAuth] = useState(false);\n  const [adminPw, setAdminPw] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [confirmedName, setConfirmedName] = useState('');\n  useEffect(() => {\n    const savedSlots = localStorage.getItem('adminSlots');\n    if (savedSlots) setAdminSlots(JSON.parse(savedSlots));\n    const savedReservations = localStorage.getItem('reservations');\n    if (savedReservations) setReservations(JSON.parse(savedReservations));\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('adminSlots', JSON.stringify(adminSlots));\n  }, [adminSlots]);\n  useEffect(() => {\n    localStorage.setItem('reservations', JSON.stringify(reservations));\n  }, [reservations]);\n  const text = {\n    ko: {\n      title: adminAuth ? '관리자 슬롯 설정' : '📅 워크숍 예약 시스템',\n      name: '이름',\n      email: '이메일',\n      date: '예약 날짜',\n      time: '시간 선택',\n      memo: '메모 (선택사항)',\n      submit: '예약하기',\n      reservationTitle: '📋 예약 현황',\n      success: name => `✅ ${name}님의 예약이 완료되었습니다!`,\n      error: '모든 항목을 입력해주세요.',\n      full: '정원이 가득 찼습니다. 다른 시간을 선택해주세요.',\n      slotConfig: '슬롯 추가',\n      slotList: '📅 예약 가능한 슬롯',\n      delete: '삭제',\n      login: '관리자 로그인',\n      close: '닫기'\n    },\n    en: {\n      title: adminAuth ? 'Admin Slot Management' : '📅 Workshop Reservation System',\n      name: 'Name',\n      email: 'Email',\n      date: 'Reservation Date',\n      time: 'Select Time',\n      memo: 'Memo (optional)',\n      submit: 'Reserve',\n      reservationTitle: '📋 Reservation List',\n      success: name => `✅ ${name}, your reservation is complete!`,\n      error: 'Please fill in all fields.',\n      full: 'This time slot is full. Please choose another.',\n      slotConfig: 'Add Slot',\n      slotList: '📅 Available Reservation Slots',\n      delete: 'Delete',\n      login: 'Admin Login',\n      close: 'Close'\n    }\n  };\n  const t = text[lang];\n  const MAX_CAPACITY = 3;\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = () => {\n    const {\n      name,\n      email,\n      datetimeId\n    } = form;\n    if (!name || !email || !datetimeId) {\n      setMessage(/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600\",\n        children: t.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 18\n      }, this));\n      return;\n    }\n    const count = reservations.filter(r => r.datetimeId === datetimeId).length;\n    if (count >= MAX_CAPACITY) {\n      setMessage(/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600\",\n        children: t.full\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 18\n      }, this));\n      return;\n    }\n    setReservations([...reservations, form]);\n    setConfirmedName(name);\n    setShowModal(true);\n    setForm({\n      name: '',\n      email: '',\n      datetimeId: '',\n      memo: ''\n    });\n    emailjs.send(\"your_service_id\", \"your_template_id\", {\n      to_name: name,\n      to_email: email,\n      datetime: datetimeId,\n      memo: form.memo\n    }, \"your_user_id\").then(() => console.log(\"✅ Email sent\")).catch(err => console.error(\"❌ Email failed\", err));\n  };\n  const handleSlotAdd = () => {\n    if (newSlot.title && newSlot.date && newSlot.time) {\n      const id = `${newSlot.date} ${newSlot.time}`;\n      const exists = adminSlots.some(slot => slot.date === newSlot.date && slot.time === newSlot.time);\n      if (!exists) {\n        setAdminSlots([...adminSlots, {\n          ...newSlot,\n          id\n        }]);\n      }\n      setNewSlot({\n        title: '',\n        date: '',\n        time: ''\n      });\n    }\n  };\n  const handleSlotDelete = index => {\n    const updated = [...adminSlots];\n    updated.splice(index, 1);\n    setAdminSlots(updated);\n  };\n  const handleAdminLogin = () => {\n    if (adminPw === '3931') {\n      setAdminAuth(true);\n      setAdminPw('');\n    } else {\n      alert('비밀번호가 틀렸습니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center text-red-500 p-4\",\n    children: \"\\u2705 \\uCF54\\uB4DC \\uC815\\uC0C1 \\uBC18\\uC601\\uB428 \\u2014 JSX UI\\uAC00 \\uC644\\uC804\\uD788 \\uB2EB\\uD614\\uC2B5\\uB2C8\\uB2E4.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 10\n  }, this);\n}\n_s(ReservationApp, \"15X0qIP+74fwCT69yKt9WjWNe5w=\");\n_c = ReservationApp;\nvar _c;\n$RefreshReg$(_c, \"ReservationApp\");","map":{"version":3,"names":["useState","useEffect","DatePicker","emailjs","jsxDEV","_jsxDEV","ReservationApp","_s","lang","setLang","reservations","setReservations","form","setForm","name","email","datetimeId","memo","message","setMessage","adminSlots","setAdminSlots","newSlot","setNewSlot","title","date","time","isAdmin","setIsAdmin","adminAuth","setAdminAuth","adminPw","setAdminPw","showModal","setShowModal","confirmedName","setConfirmedName","savedSlots","localStorage","getItem","JSON","parse","savedReservations","setItem","stringify","text","ko","submit","reservationTitle","success","error","full","slotConfig","slotList","delete","login","close","en","t","MAX_CAPACITY","handleChange","e","target","value","handleSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","count","filter","r","length","send","to_name","to_email","datetime","then","console","log","catch","err","handleSlotAdd","id","exists","some","slot","handleSlotDelete","index","updated","splice","handleAdminLogin","alert","_c","$RefreshReg$"],"sources":["/Users/kimyeun/Desktop/reservation-app-tailwind-full/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport emailjs from '@emailjs/browser';\n\nexport default function ReservationApp() {\n  const [lang, setLang] = useState('ko');\n  const [reservations, setReservations] = useState([]);\n  const [form, setForm] = useState({ name: '', email: '', datetimeId: '', memo: '' });\n  const [message, setMessage] = useState('');\n  const [adminSlots, setAdminSlots] = useState([]);\n  const [newSlot, setNewSlot] = useState({ title: '', date: '', time: '' });\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [adminAuth, setAdminAuth] = useState(false);\n  const [adminPw, setAdminPw] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [confirmedName, setConfirmedName] = useState('');\n\n  useEffect(() => {\n    const savedSlots = localStorage.getItem('adminSlots');\n    if (savedSlots) setAdminSlots(JSON.parse(savedSlots));\n\n    const savedReservations = localStorage.getItem('reservations');\n    if (savedReservations) setReservations(JSON.parse(savedReservations));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('adminSlots', JSON.stringify(adminSlots));\n  }, [adminSlots]);\n\n  useEffect(() => {\n    localStorage.setItem('reservations', JSON.stringify(reservations));\n  }, [reservations]);\n\n  const text = {\n    ko: {\n      title: adminAuth ? '관리자 슬롯 설정' : '📅 워크숍 예약 시스템',\n      name: '이름',\n      email: '이메일',\n      date: '예약 날짜',\n      time: '시간 선택',\n      memo: '메모 (선택사항)',\n      submit: '예약하기',\n      reservationTitle: '📋 예약 현황',\n      success: name => `✅ ${name}님의 예약이 완료되었습니다!`,\n      error: '모든 항목을 입력해주세요.',\n      full: '정원이 가득 찼습니다. 다른 시간을 선택해주세요.',\n      slotConfig: '슬롯 추가',\n      slotList: '📅 예약 가능한 슬롯',\n      delete: '삭제',\n      login: '관리자 로그인',\n      close: '닫기'\n    },\n    en: {\n      title: adminAuth ? 'Admin Slot Management' : '📅 Workshop Reservation System',\n      name: 'Name',\n      email: 'Email',\n      date: 'Reservation Date',\n      time: 'Select Time',\n      memo: 'Memo (optional)',\n      submit: 'Reserve',\n      reservationTitle: '📋 Reservation List',\n      success: name => `✅ ${name}, your reservation is complete!`,\n      error: 'Please fill in all fields.',\n      full: 'This time slot is full. Please choose another.',\n      slotConfig: 'Add Slot',\n      slotList: '📅 Available Reservation Slots',\n      delete: 'Delete',\n      login: 'Admin Login',\n      close: 'Close'\n    }\n  };\n\n  const t = text[lang];\n  const MAX_CAPACITY = 3;\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = () => {\n    const { name, email, datetimeId } = form;\n    if (!name || !email || !datetimeId) {\n      setMessage(<p className=\"text-red-600\">{t.error}</p>);\n      return;\n    }\n\n    const count = reservations.filter(r => r.datetimeId === datetimeId).length;\n    if (count >= MAX_CAPACITY) {\n      setMessage(<p className=\"text-red-600\">{t.full}</p>);\n      return;\n    }\n\n    setReservations([...reservations, form]);\n    setConfirmedName(name);\n    setShowModal(true);\n    setForm({ name: '', email: '', datetimeId: '', memo: '' });\n\n    emailjs.send(\"your_service_id\", \"your_template_id\", {\n      to_name: name,\n      to_email: email,\n      datetime: datetimeId,\n      memo: form.memo\n    }, \"your_user_id\")\n    .then(() => console.log(\"✅ Email sent\"))\n    .catch(err => console.error(\"❌ Email failed\", err));\n  };\n\n  const handleSlotAdd = () => {\n    if (newSlot.title && newSlot.date && newSlot.time) {\n      const id = `${newSlot.date} ${newSlot.time}`;\n      const exists = adminSlots.some(slot => slot.date === newSlot.date && slot.time === newSlot.time);\n      if (!exists) {\n        setAdminSlots([...adminSlots, { ...newSlot, id }]);\n      }\n      setNewSlot({ title: '', date: '', time: '' });\n    }\n  };\n\n  const handleSlotDelete = (index) => {\n    const updated = [...adminSlots];\n    updated.splice(index, 1);\n    setAdminSlots(updated);\n  };\n\n  const handleAdminLogin = () => {\n    if (adminPw === '3931') {\n      setAdminAuth(true);\n      setAdminPw('');\n    } else {\n      alert('비밀번호가 틀렸습니다.');\n    }\n  };\n\n  return <div className=\"text-center text-red-500 p-4\">✅ 코드 정상 반영됨 — JSX UI가 완전히 닫혔습니다.</div>;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}